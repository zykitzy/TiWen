<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Com.OCAMAR.Common.Library</name>
    </assembly>
    <members>
        <member name="T:Com.OCAMAR.Common.Library.BaseResponse`1">
            <summary>
            响应基类
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.BaseResponse`1.IsSuccess">
            <summary>
            请求是否成功
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.BaseResponse`1.Message">
            <summary>
            简短消息提示，例如申请成功
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.BaseResponse`1.Data">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Caching.CacheManagerConfigurationHandler">
            <summary>
            缓存管理器映射处理类
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.CacheManagerConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Caching.DefaultCacheManagerFactory">
            <summary>
            默认缓存管理器工厂类
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Caching.DefaultCacheManagerFactory.CacheManagerConfigurationMappings">
            <summary>
            缓存映射
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.DefaultCacheManagerFactory.GetCacheManager``1">
            <summary>
            获取缓存管理器
            </summary>
            <typeparam name="T">缓存管理器管理的类型</typeparam>
            <returns>缓存管理器</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.DefaultCacheManagerFactory.GetCacheManager(System.Type)">
            <summary>
            获取缓存管理器
            </summary>
            <param name="type">缓存管理器管理的类型</param>
            <returns>缓存管理器</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.DefaultCacheManagerFactory.FindCacheManager(System.String)">
            <summary>
            根据类型查找缓存管理器
            </summary>
            <param name="typeName">缓存管理器管理的类型</param>
            <returns>缓存管理器</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Caching.ICacheManager">
            <summary>
            缓存管理器接口
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Caching.ICacheManager.SupportedReload">
            <summary>
            是否支持刷新缓存
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager.Reload">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Caching.ICacheManager`1">
            <summary>
            缓存管理器接口
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Count">
            <summary>
            缓存中的元素个数
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.ContainsKey(System.String)">
            <summary>
            检测缓存中是否包含指定元素
            </summary>
            <param name="key">关键字</param>
            <returns>true包含，false不包含</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Get(System.String)">
            <summary>
            根据关键字获取指定元素
            </summary>
            <param name="key">关键字</param>
            <returns>指定元素</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.TryGet(System.String,`0@)">
            <summary>
            尝试获取指定元素
            </summary>
            <param name="key">关键字</param>
            <param name="value">指定元素</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.GetExpirationTime(System.String)">
            <summary>
            获取元素的过期时间
            </summary>
            <param name="key">关键字</param>
            <returns>过期时间</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Set(System.String,`0)">
            <summary>
            设置指定元素值
            </summary>
            <param name="key">关键字</param>
            <param name="value">指定元素</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Set(System.String,`0,System.DateTime)">
            <summary>
            设置指定元素值并指定绝对过期时间
            </summary>
            <param name="key">关键字</param>
            <param name="value">指定元素</param>
            <param name="absoluteExpiration">绝对过期时间</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Set(System.String,`0,System.TimeSpan)">
            <summary>
            设置指定元素值并指定滑动过期时间
            </summary>
            <param name="key">关键字</param>
            <param name="value">指定元素</param>
            <param name="slidingExpiration">绝对过期时间</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManager`1.Remove(System.String)">
            <summary>
            移除指定元素并返回被移除的元素
            </summary>
            <param name="key">关键字</param>
            <returns>被移除的元素</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Caching.ICacheManagerFactory">
            <summary>
            缓存管理器工厂类
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManagerFactory.GetCacheManager``1">
            <summary>
            获取缓存管理器
            </summary>
            <typeparam name="T">缓存管理器管理的类型</typeparam>
            <returns>缓存管理器</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Caching.ICacheManagerFactory.GetCacheManager(System.Type)">
            <summary>
            获取缓存管理器
            </summary>
            <param name="type">缓存管理器管理的类型</param>
            <returns>缓存管理器</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.CommonService.CommonConfigService">
            <summary>
            配置服务工具
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonConfigService.GetByKey(System.String,System.String)">
            <summary>
            根据应用名称及键查询字典配置项
            </summary>
            <param name="appName">应用名称</param>
            <param name="key">键</param>
            <returns>字典配置项</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonConfigService.GetByAppName(System.String)">
            <summary>
            根据应用名称查询所有字典配置项
            </summary>
            <param name="appName">应用名称</param>
            <returns>所有字典配置项</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonConfigService.GetByParentKey(System.String,System.String)">
            <summary>
            根据应用名称及父级键查询所有子级字典配置项
            </summary>
            <param name="appName">应用名称</param>
            <param name="parentKey">父级键</param>
            <returns>所有子级字典配置项</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.CommonService.CommonLogService">
            <summary>
            日志记录工具
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonLogService.Debug(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录调试级别的日志
            </summary>
            <param name="ip">与日志关联的Ip地址</param>
            <param name="appName">记录日志的应用名称，必填项</param>
            <param name="user">当时应用关联的用户名称，必填项</param>
            <param name="type">日志类型，任何便于区分日志种类的类型，例如审核、进件或者文件上传，必填项</param>
            <param name="message">日志短消息，比如进件失败，文件上传失败，必填项</param>
            <param name="text">日志，详细信息，记录所有的信息，必填项</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonLogService.Info(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录信息级别的日志
            </summary>
            <param name="ip">与日志关联的Ip地址</param>
            <param name="appName">记录日志的应用名称，必填项</param>
            <param name="user">当时应用关联的用户名称，必填项</param>
            <param name="type">日志类型，任何便于区分日志种类的类型，例如审核、进件或者文件上传，必填项</param>
            <param name="message">日志短消息，比如进件失败，文件上传失败，必填项</param>
            <param name="text">日志，详细信息，记录所有的信息，必填项</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonLogService.Warn(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录警告级别的日志
            </summary>
            <param name="ip">与日志关联的Ip地址</param>
            <param name="appName">记录日志的应用名称，必填项</param>
            <param name="user">当时应用关联的用户名称，必填项</param>
            <param name="type">日志类型，任何便于区分日志种类的类型，例如审核、进件或者文件上传，必填项</param>
            <param name="message">日志短消息，比如进件失败，文件上传失败，必填项</param>
            <param name="text">日志，详细信息，记录所有的信息，必填项</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonLogService.Error(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录错误级别的日志
            </summary>
            <param name="ip">与日志关联的Ip地址</param>
            <param name="appName">记录日志的应用名称，必填项</param>
            <param name="user">当时应用关联的用户名称，必填项</param>
            <param name="type">日志类型，任何便于区分日志种类的类型，例如审核、进件或者文件上传，必填项</param>
            <param name="message">日志短消息，比如进件失败，文件上传失败，必填项</param>
            <param name="text">日志，详细信息，记录所有的信息，必填项</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.CommonService.CommonLogService.Fatal(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录严重错误级别的日志
            </summary>
            <param name="ip">与日志关联的Ip地址</param>
            <param name="appName">记录日志的应用名称，必填项</param>
            <param name="user">当时应用关联的用户名称，必填项</param>
            <param name="type">日志类型，任何便于区分日志种类的类型，例如审核、进件或者文件上传，必填项</param>
            <param name="message">日志短消息，比如进件失败，文件上传失败，必填项</param>
            <param name="text">日志，详细信息，记录所有的信息，必填项</param>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary">
            <summary>
            字典配置表
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary.AppName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary.ParentKey">
            <summary>
            父级键
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.CommonService.CommonGlobleDictionary.Sequence">
            <summary>
            排序序号
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Crypto.EncryptUtil">
            <summary>
            加密解密工具类
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.AESEncrypt(System.String,System.String)">
            <summary>  
            AES加密(无向量)  
            </summary>  
            <param name="plainText">被加密的明文</param>  
            <param name="key">秘钥</param>  
            <returns>加密后的密文</returns>  
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.AESZeroEncrypt(System.String,System.String)">
            <summary>
            AES加密(无向量)  Base64
            </summary>
            <param name="Data"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.AESDecrypt(System.String,System.String)">
            <summary>  
            AES解密(无向量)  
            </summary>  
            <param name="encryptedText">加密后的密文</param>  
            <param name="key">秘钥</param>  
            <returns>被加密的明文</returns>  
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.AESZeroDecrypt(System.String,System.String)">
            <summary>
            AES AES解密(无向量)  Base64
            </summary>
            <param name="Data"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.Base16Encode(System.Byte[])">
            <summary>
            Base16加密
            </summary>
            <param name="buffer">待加密的字节数组</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.Base16Decode(System.String)">
            <summary>
            Base16解密
            </summary>
            <param name="text">加密后的字符串</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.RSAEncrypt(System.String,System.String)">
            <summary>
            Rsa 使用公钥加密
            </summary>
            <param name="publicKey">公钥</param>
            <param name="content">被加密的明文</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.RSADecrypt(System.String,System.String)">
            <summary>
            Rsa 使用私钥解密
            </summary>
            <param name="privateKey">私钥</param>
            <param name="content">加密后的密文</param>
            <returns>被加密的明文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.RSASignData(System.String,System.Byte[])">
            <summary>
            Rsa 使用私钥签名
            </summary>
            <param name="privateKey">私钥</param>
            <param name="bufferFrom">被加密的明文序列</param>
            <returns>加密后的密文序列</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.RSAVerifyData(System.String,System.Byte[],System.Byte[])">
            <summary>
            Ras 使用公钥验证
            </summary>
            <param name="publicKey">公钥</param>
            <param name="bufferFrom">被加密的明文序列</param>
            <param name="cipherbytes">加密后的密文序列</param>
            <returns>验证是否成功</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.EncryptUtil.Md5Encrypt(System.String,System.Boolean)">
            <summary>
            Md5加密
            </summary>
            <param name="source">被加密文本</param>
            <param name="isUpper">是否结果大写</param>
            <returns>加密后的文本</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Crypto.SymmCrypto">
            <summary>
            对称加密算法封装
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.Key">
            <summary>
            加密密钥，16或32个字节，长度不相符会抛出ArgumentException。如不设置，会自动随机产生。
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.IV">
            <summary>
            初始化向量，16个字节，长度不相符会抛出ArgumentException。如不设置，会自动随机产生。
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.#ctor(System.Byte[],System.Byte[])">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.#ctor(System.String,System.String)">
            <summary>
            </summary>
            <param name="key">8或16个字符的字符串，长度不符会抛出ArgumentException</param>
            <param name="iv">8个字符的字符串，长度不符会抛出ArgumentException</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.Encrypt(System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="data">数据明文</param>
            <returns>数据密文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.Decrypt(System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="cipherText">数据密文</param>
            <returns>数据明文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.EncryptFromString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.EncryptFromString(System.String,System.Text.Encoding)">
            <summary>
            加密字符串
            </summary>
            <param name="plainText">原文</param>
            <param name="encoding">编码格式</param>
            <returns>密文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.DecryptToString(System.Byte[])">
            <summary>
            解密为字符串
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.DecryptToString(System.Byte[],System.Text.Encoding)">
            <summary>
            解密为字符串
            </summary>
            <param name="cipherText">密文array</param>
            <param name="encoding">指定编码格式</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            加密，内部调用SymmCrypto.Encrypt
            </summary>
            <param name="plainText"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.EncryptFromString(System.String,System.Byte[],System.Byte[])">
            <summary>
            加密，内部调用SymmCrypto.EncryptFromString
            </summary>
            <param name="plainText"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.EncryptFromString(System.String,System.String,System.String)">
            <summary>
            加密，内部调用SymmCrypto.EncryptFromString
            </summary>
            <param name="plainText"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密，内部调用SymmCrypto.Decrypt
            </summary>
            <param name="cipherText"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.DecryptToString(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密，内部调用SymmCrypto.DecryptToString
            </summary>
            <param name="cipherText"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Crypto.SymmCrypto.DecryptToString(System.Byte[],System.String,System.String)">
            <summary>
            解密，内部调用SymmCrypto.DecryptToString
            </summary>
            <param name="cipherText"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2">
            <summary>
            数据存储基类
            </summary>
            <typeparam name="Context">上下文对象类型</typeparam>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.DbContext">
            <summary>
            数据上下文对象
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.UseTransaction">
            <summary>
            是否使用事务
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.#ctor(System.Boolean)">
            <summary>
            构造函数
            默认开启事务，在显示关闭事务的情况下，需要手动操作 <see cref="P:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.DbContext" />
            ，推荐新建一个类名结尾为 WithOwnTransactionDAL 的数据操作类
            <param name="useTransaction">是否使用事务，默认为true</param>
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.Get(System.Object)">
            <summary>
            获取单个实体对象
            </summary>
            <param name="key">关键词</param>
            <returns>单个实体对象</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.GetAll">
            <summary>
            查询多个对象
            </summary>
            <returns>多个对象</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.GetAll(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            查询多个对象
            </summary>
            <param name="predicate">查询表达式</param>
            <returns>多个对象</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.Add(`1)">
            <summary>
            新增实体对象
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            新增多个实体对象
            </summary>
            <param name="entities">多个实体对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.Update(`1)">
            <summary>
            更新实体对象
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.UpdateRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            更新多个实体对象
            </summary>
            <param name="entities">多个实体对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.Delete(`1)">
            <summary>
            删除实体对象
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.DeleteRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            删除多个实体对象
            </summary>
            <param name="entities">多个实体对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.AcceptAllChange">
            <summary>
            接受所有更改请求
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.NonTransactionAcceptAllChange">
            <summary>
            不使用事务进行提交
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.BaseRepository`2.TransactionAcceptAllChange">
            <summary>
            使用事务进行提交
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.EntityFramework.DbSqlWriterInterceptor">
            <summary>
            数据库SQL语句及查询异常信息记录类
            </summary>
        </member>
        <member name="E:Com.OCAMAR.Common.Library.EntityFramework.DbSqlWriterInterceptor.HeaderEvent">
            <summary>
            在写SQL语句到日志时，可在输出日志的前面增加输出内容
            </summary>
        </member>
        <member name="E:Com.OCAMAR.Common.Library.EntityFramework.DbSqlWriterInterceptor.FooterEvent">
            <summary>
            在写SQL语句到日志时，可在输出日志的后面增加输出内容
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.EntityFramework.EFContextFactory">
            <summary>
            EntityFramework上下文工厂类
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.EFContextFactory.GetContext``1">
            <summary>
            获取上下文对象
            </summary>
            <typeparam name="Context">对象类型</typeparam>
            <returns>上下文对象</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.EFContextFactory.RemoveContext``1">
            <summary>
            移除上下文
            </summary>
            <typeparam name="Context">对象类型</typeparam>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.EntityFramework.EFContextFactory.NewContext``1">
            <summary>
            创建全新的上下文对象
            </summary>
            <typeparam name="Context">上下文对象类型</typeparam>
            <returns>上下文对象</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.LogWriterDynamic">
            <summary>
            动态日志记录
            </summary>
        </member>
        <member name="F:Com.OCAMAR.Common.Library.LogWriterDynamic.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriterDynamic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            重写获取成员方法
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Utility.FtpUtil">
            <summary>
            Ftp工具类
            作者 严敏春
            日期 2015-12-28
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Utility.FtpUtil.Root">
            <summary>
            Ftp操作的根目录，默认为ftp://ip/
            例如，对于ftp://root/child/folder1，可以设置为ftp://root/child/，则所有操作都会针对此目录
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.#ctor(System.String,System.String,System.String)">
            <summary>
            构造实例
            </summary>
            <param name="ip">IP地址，例如 127.0.0.1或127.0.0.1:其他端口号</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.FixPath(System.String)">
            <summary>
            修正路径
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            上传文件
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/</param>
            <param name="localPath">本地文件路径，例如 D:\\file.txt</param>
            <param name="createDirectory">true：如果ftp目录不存在则创建，false：不检测目录是否存在，不存在抛异常</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.UploadFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            上传文件
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/</param>
            <param name="buffer">字节数组</param>
            <param name="createDirectory">true：如果ftp目录不存在则创建，false：不检测目录是否存在，不存在抛异常</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.DownloadFile(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/file.txt</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.DownloadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/file.txt</param>
            <param name="savePath">本地文件路径，例如 D:\\file.txt</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.CreateDirectory(System.String)">
            <summary>
            创建ftp目录
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/，可递归一级一级创建目录</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.RemoveFile(System.String)">
            <summary>
            移除文件
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/file.txt</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.RemoveDirectory(System.String)">
            <summary>
            移除文件夹
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/，可递归一级一级移除目录并且删除文件</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.ListDirectoryDetails(System.String)">
            <summary>
            获取ListDirectoryDetails协议列出的内容
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/</param>
            <returns>ListDirectoryDetails协议列出的内容</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.ListDirectory(System.String)">
            <summary>
            获取ListDirectory协议列出的内容
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/</param>
            <returns>ListDirectory协议列出的内容</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.GetFileList(System.String)">
            <summary>
            获取ftp目录下所有的文件
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/</param>
            <returns>ftp目录下所有的文件</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.GetDirectoryList(System.String)">
            <summary>
            获取ftp目录下所有的子目录
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/</param>
            <returns>ftp目录下所有的子目录</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/file.txt</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.FileExist(System.String)">
            <summary>
            判断Ftp上文件是否存在
            </summary>
            <param name="ftpPath">ftp路径，例如 root/child/folder1/file.txt</param>
            <returns>true：存在，false：不存在</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.DirectoryExist(System.String)">
            <summary>
            判断Ftp上目录是否存在
            </summary>
            <param name="ftpDirectory">ftp目录，例如 root/child/folder1/</param>
            <returns>true：存在，false：不存在</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.FtpUtil.Rename(System.String,System.String)">
            <summary>
            文件更名，若新的位置已存在同名文件，将抛出异常
            </summary>
            <param name="currentFtpPath">当前ftp路径，例如 root/child/file.txt</param>
            <param name="newRelativePath">新的相对ftp路径，例如 ../child2/file.txt，folder1/file.txt</param>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Utility.HttpUtil">
            <summary>
            Http请求工具
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.HttpUtil.Get(System.String,System.String,System.Action{System.Net.HttpWebRequest})">
            <summary>
            Get请求
            </summary>
            <param name="url">请求地址</param>
            <param name="responseEncoding">响应编码，默认为utf-8</param>
            <param name="customRequest">自定义请求，默认为null</param>
            <returns>响应正文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.HttpUtil.Post(System.String,System.String,System.String,System.String,System.Action{System.Net.HttpWebRequest})">
            <summary>
            POST请求
            </summary>
            <param name="url">请求地址</param>
            <param name="content">请求正文</param>
            <param name="responseEncoding">响应编码，默认为utf-8</param>
            <param name="contentType">正文类型</param>
            <param name="customRequest">自定义请求，默认为null</param>
            <returns>响应正文</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.HttpUtil.Post(System.String,System.Object,System.String,System.String,System.Action{System.Net.HttpWebRequest})">
            <summary>
            POST请求
            </summary>
            <param name="url">请求地址</param>
            <param name="content">请求正文，此参数将被序列化</param>
            <param name="responseEncoding">响应编码，默认为utf-8</param>
            <param name="contentType">正文类型</param>
            <param name="customRequest">自定义请求，默认为null</param>
            <returns>响应正文</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Utility.JsonQuickReader">
            <summary>
            Json快速查询表达式
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.JsonQuickReader.Get``1(System.String,System.String)">
            <summary>
            快速获取Json值
            </summary>
            <param name="json">json文本</param>
            <param name="jsonPath">查询表达式</param>
            <returns>Json值</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.JsonQuickReader.TryGet``1(System.String,System.String,``0@)">
            <summary>
            快速获取Json值
            </summary>
            <param name="json">json文本</param>
            <param name="jsonPath">查询表达式</param>
            <param name="value">返回值</param>
            <returns>Json值</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.JsonQuickReader.Update(System.String,System.String,System.Object)">
            <summary>
            快速替换Json值
            </summary>
            <param name="json">json文本</param>
            <param name="jsonPath">查询表达式</param>
            <param name="value">替换值</param>
            <returns>Json值</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.JsonQuickReader.TryUpdate(System.String,System.String,System.Object,System.String@)">
            <summary>
            快速替换Json值
            </summary>
            <param name="json">json文本</param>
            <param name="jsonPath">查询表达式</param>
            <param name="value">替换值</param>
            <param name="result">替换后的Json</param>
            <returns>Json值</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.JsonQuickReader.ParseValue``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            解析值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="token">原始值</param>
            <returns>值</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.JsonQuickReader.Get(System.String,System.String)">
            <summary>
            快速获取Json值
            </summary>
            <param name="json">json文本</param>
            <param name="jsonPath">查询表达式</param>
            <returns>Json值</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Utility.WebServiceUtil">
            <summary>
            WebService请求工具
            </summary>
        </member>
        <member name="F:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.defaultNamespace">
            <summary>
            默认的WebService命名空间
            </summary>
        </member>
        <member name="F:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.AssemblyCache">
            <summary>
            WebService程序集缓存，提高请求速度
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.Invoke(System.String,System.String,System.Object[])">
            <summary>
            动态调用WebService
            此方法参数不指定类名及方法参数类型
            </summary>
            <param name="url">WebService地址</param>
            <param name="methodName">方法名，指定调用哪一个方法</param>
            <param name="args">参数列表</param>
            <returns>object</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.Invoke(System.String,System.String,System.String,System.Type[],System.Object[])">
            <summary>
            动态调用WebService
            </summary>
            <param name="url">WebService地址</param>
            <param name="className">类名，WebService类名不一定等于服务名称，在必要时需要直接指定</param>
            <param name="methodName">方法名，指定调用哪一个方法</param>
            <param name="types">参数类型</param>
            <param name="args">参数列表</param>
            <returns>object</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.CreateAssembly(System.String)">
            <summary>
            读取wsdl定义并创建程序集
            </summary>
            <param name="url">WebService地址</param>
            <returns>程序集</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.GetClassName(System.String)">
            <summary>
            从URL连接中获取类名
            </summary>
            <param name="url">URL连接地址</param>
            <returns>类名</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Utility.WebServiceUtil.CreateInstance(System.Reflection.Assembly,System.String)">
            <summary>
            创建服务类
            </summary>
            <param name="assembly">程序集</param>
            <param name="className">类名</param>
            <returns>服务类</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Lambda.PredicateBuilder">
            <summary>
            表达式树构建工具
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Lambda.PredicateBuilder.True``1">
            <summary>
            返回true的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Lambda.PredicateBuilder.False``1">
            <summary>
            返回false的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Lambda.PredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Lambda.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Lambda.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.LogWriter">
            <summary>
            文本日志记录类
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.LogWriter.IsDebugEnabled">
            <summary>
            是否开启调试级别的日志记录
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.LogWriter.IsInfoEnabled">
            <summary>
            是否开启信息级别的日志记录
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.LogWriter.IsWarnEnabled">
            <summary>
            是否开启警告级别的日志记录
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.LogWriter.IsErrorEnabled">
            <summary>
            是否开启错误级别的日志记录
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.LogWriter.IsFatalEnabled">
            <summary>
            是否开启验证错误级别的日志记录
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.Debug(System.String)">
            <summary>
            记录调试级别的日志
            </summary>
            <param name="message">日志</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.DebugFormat(System.String,System.String[])">
            <summary>
            记录调试级别的日志
            </summary>
            <param name="format">日志格式</param>
            <param name="args">日志参数</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.Info(System.String)">
            <summary>
            记录信息级别的日志
            </summary>
            <param name="message">日志</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.InfoFormat(System.String,System.String[])">
            <summary>
            记录信息级别的日志
            </summary>
            <param name="format">日志格式</param>
            <param name="args">日志参数</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.Warn(System.String)">
            <summary>
            记录警告级别的日志
            </summary>
            <param name="message">日志</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.WarnFormat(System.String,System.String[])">
            <summary>
            记录警告级别的日志
            </summary>
            <param name="format">日志格式</param>
            <param name="args">日志参数</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.Error(System.String)">
            <summary>
            记录错误级别的日志
            </summary>
            <param name="message">日志</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.ErrorFormat(System.String,System.String[])">
            <summary>
            记录错误级别的日志
            </summary>
            <param name="format">日志格式</param>
            <param name="args">日志参数</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.Fatal(System.String)">
            <summary>
            记录严重错误级别的日志
            </summary>
            <param name="message">日志</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.LogWriter.FatalFormat(System.String,System.String[])">
            <summary>
            记录严重错误级别的日志
            </summary>
            <param name="format">日志格式</param>
            <param name="args">日志参数</param>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.RequestModule">
            <summary>
            请求拦截模块
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.RequestModule.ResponseFilter">
            <summary>
            输出过滤器
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.RequestModule.Init(System.Web.HttpApplication)">
            <summary>
            模块初始化
            </summary>
            <param name="context">应用上下文对象</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.RequestModule.Context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            请求开始
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.RequestModule.Context_ReleaseRequestState(System.Object,System.EventArgs)">
            <summary>
            请求结束
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.RequestModule.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Serialize.ObjectSerializer">
            <summary>
            对象序列化工具
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Serialize.ObjectSerializer.DeserializeObject``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="text">json文本</param>
            <returns>对象</returns>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Serialize.ObjectSerializer.SerializeObject(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="data">对象</param>
            <returns>json文本</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Validation.IParameterValidator`1">
            <summary>
            验证期
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Validation.IParameterValidator`1.Validate(`0)">
            <summary>
            参数验证
            </summary>
            <param name="value">参数值</param>
            <returns>是否合法</returns>
        </member>
        <member name="T:Com.OCAMAR.Common.Library.Validation.ValidateResult">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Validation.ValidateResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Validation.ValidateResult.IsValid">
            <summary>
            被验证的对象是否合法
            </summary>
        </member>
        <member name="P:Com.OCAMAR.Common.Library.Validation.ValidateResult.Errors">
            <summary>
            验证错误
            </summary>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Validation.ValidateResult.Add(System.String)">
            <summary>
            添加错误信息
            </summary>
            <param name="error">错误信息</param>
        </member>
        <member name="M:Com.OCAMAR.Common.Library.Validation.ValidateResult.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加错误信息
            </summary>
            <param name="list">错误信息集合</param>
        </member>
    </members>
</doc>
